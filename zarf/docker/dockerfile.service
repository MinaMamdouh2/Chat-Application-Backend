# Build the Go Binary.
FROM golang:1.21.0 as build_chat-api
ENV CGO_ENABLED 0
ARG BUILD_REF

# IF not vendoring, create the service directory and the copy the module files first and then
# download the dependencies. If this doesn't change, we won't need to do this
# again in future builds.
# RUN mkdir /service
# COPY go.* /service/
# WORKDIR /service
# RUN go mod download

#Copy the source code into the container.
COPY . /service

# Build the service binary.
WORKDIR /service/app/services/chat-api
RUN go build -ldflags "-X main.build=${BUILD_REF}"

# Build the admin binary.
WORKDIR /service/app/tooling/admin
RUN go build -ldflags "-X main.build=${BUILD_REF}"

# Run the Go Binary in Alpine.
FROM alpine:3.18
ARG BUILD_DATE
ARG BUILD_REF
# We are defining a group so we don't run the binary as a super user or sudo
# inside a container or inside a cluster
RUN addgroup -g 1000 -S chat && \
  adduser -u 1000 -h /service -G chat -S chat
COPY --from=build_chat-api --chown=chat:chat /service/zarf/keys/. /service/zarf/keys/.
COPY --from=build_chat-api --chown=chat:chat /service/app/services/chat-api/chat-api /service/chat-api
COPY --from=build_chat-api --chown=sales:sales /service/app/tooling/admin/admin /service/admin

WORKDIR /service
USER chat
CMD ["sh", "-c", "./admin && ./chat-api"]

LABEL org.opencontainers.image.created="${BUILD_DATE}" \
  org.opencontainers.image.title="chat-api" \
  org.opencontainers.image.authors="Mina Mamdouh <mina.mamdouh.farag@gmail.com>" \
  org.opencontainers.image.source="https://github.com/MinaMamdouh2/Chat-Application-Backend" \
  org.opencontainers.image.revision="${BUILD_REF}" \
  org.opencontainers.image.vendor="Mina Mamdouh"